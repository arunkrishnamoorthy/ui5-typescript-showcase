"use strict";

var _visitor = require("./classes/visitor");
var _visitor2 = require("./modules/visitor");
var _wrapper = require("./modules/helpers/wrapper");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
References:
Babel Plugin Handbook: https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md
AST Spec: https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md
Babel Types (t.*) https://github.com/babel/babel/tree/master/packages/babel-types
AST Explorer: https://astexplorer.net/
*/

module.exports = () => {
  const UI5Visitor = _objectSpread({
    Program: {
      enter(path, {
        opts
      }) {
        if (this.ran) return;
        this.ran = true;
        if (opts.onlyConvertNamedClass == false) {
          throw new Error("ERROR: onlyConvertNamedClass=false is no longer supported. Use autoConvertAllExtendClassesByDefault=true");
        }
        // TODO: enable this in a later version
        // else if (opts.onlyConvertNamedClass == true) {
        //   console.warn('WARN: onlyConvertNamedClass=true is now the default behaviour') // eslint-disable-line no-console
        // }

        // Opts
        this.namespacePrefix = opts.namespacePrefix;
        this.noImportInteropPrefixes = opts.noImportInteropPrefixes || ["sap/"];
        this.noImportInteropPrefixesRegexp = new RegExp(this.noImportInteropPrefixes.map(p => `(^${p}.*)`).join("|"));

        // Properties for Module Transform
        this.programNode = path.node;
        this.parent = path.parent;
        this.defaultExport = null;
        this.defaultExportNode = null;
        this.exportGlobal = false;
        this.ignoredImports = [];
        this.imports = [];
        this.namedExports = [];
        this.injectDynamicImportHelper = false;

        // Properties for Class Transform
        this.importNames = [];

        // The classes must be converted right away before any other class transforms get a chance to run.
        path.traverse(_visitor.ClassTransformVisitor, this);
      },
      exit(path, {
        opts
      }) {
        (0, _wrapper.wrap)(this, path.node, opts);
      }
    }
  }, _visitor2.ModuleTransformVisitor);
  return {
    visitor: UI5Visitor
  };
};